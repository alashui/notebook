1.signal.h

signal.h是C标准函数库中的信号处理部分， 定义了程序执行时如何处理不同的信号。信号用作进程间通信， 
报告异常行为（如除零）、用户的一些按键组合（如同时按下Ctrl与C键，产生信号SIGINT）。
监听到程序是否接收到退出命令,或者中断命令等处理
常量解析
宏 			信号 									说明
SIGABRT 	Signal Abort 							程序异常终止
SIGFPE 		Signal Floating-Point Exception 		算术运算出错 如:除以0
SIGINT 		Signal Interrupt 						中断信号 如:ctrl-C
SIGSEGV 	Signal Segmentation Violation 			非法访问不存在的内存单元
SIGTERM 	Signal Terminate 						发送给本程序的终止请求信号.

DEMO

	#include <stdio.h>
	#include <unistd.h>
	#include <stdlib.h>
	#include <signal.h>

	void sighanlder(int);
	int main()
	{
		signal(SIGINT, sighandler);
		while(1)
		{
		    print("start sleeping!");
		    sleep(1);//unit is second
		}
		return 0;
	}
	void sighandler(int signum)
	{
		printf("Catch a signal num is %d ...\n", signum);
		exit(1);
	}


2.关于shared_ptr
shared_ptr，顾名思义，是共享指针。boost库引入shared_ptr为了实现在C++中通过引用计数对堆对象进行内存管理的
一种机制。更多关于shared_ptr的信息，可参考shared_ptr template.这是比较完善的一个智能指针，他是通过指针保
持某个对象的共享拥有权的智能指针。若干个shared_ptr对象可以拥有同一个对象，该对象通过维护一个引用计数，记录
有多少个shared_ptr指针指向该对象，最后一个指向该对象的shared_ptr被销毁或重置时，即引用计数变为0时，该对象
被销毁。销毁对象时使用的是delete表达式或是在构造shared_ptr时传入的自定义删除器（delete）

一般可以通过以下方式使用shared_ptr:

	boost::shared_ptr<classa> sp1(new classa());
	boost::shared_ptr<classa> sp2 = sp1;

shared_ptr对象最初创建时的reference count为1，表示当前存在一个指向对象的引用；将sp1通过赋值操作符（=）
赋值给sp2后，shared_ptr对象的reference count则会增1，表明又多了一个指向对象的引用。

当推出shared_ptr对象所在的作用域（函数体，代码块，或者是用作返回值或传值参数的临时对象）时，shared_ptr
的析构函数就会被调用，此时reference count就会减1，当reference count减到0时才会delete所引用的内存对象。
如此便实现了对内存对象的自动管理，程序员不在用去担心何时去delete一个对象，delete一个对象会不会导致一个
dangling指针，这些shared_ptr都帮你搞定了。

然而，但凡C/C++中涉及到释放内存资源的一类问题，都要小心使用，否则尽管有shared_ptr，仍可能出现一些隐藏的
bug，比如在使用shared_ptr作为参数传递时。

3.mutable关键字[https://www.zhihu.com/question/64969053/answer/226383958]
a)类中的mutable
mutable 只能用来修饰类的数据成员；而被 mutable 修饰的数据成员，可以在 const 成员函数中修改。
在C++中，mutable也是为了突破const的限制而设置的。被mutable修饰的变量(mutable只能由于修饰类的非静态数据成
员)，将永远处于可变的状态，即使在一个const函数中。我们知道，假如类的成员函数不会改变对象的状态，那么这个成
员函数一般会声明为const。但是，有些时候，我们需要在const的函数里面修改一些跟类状态无关的数据成员，那么这个
数据成员就应该被mutalbe来修饰。
b)Lambda表达式中的mutable
C++11 引入了 Lambda 表达式，程序员可以凭此创建匿名函数。在 Lambda 表达式的设计中，捕获变量有几种方式；其
中按值捕获（Caputre by Value）的方式不允许程序员在 Lambda 函数的函数体中修改捕获的变量。而以 mutable 修
饰 Lambda 函数，则可以打破这种限制。
	//////////////////////
	int x{0};
	auto f1 = [=]() mutable {x = 42;};  // okay, 创建了一个函数类型的实例
	auto f2 = [=]()         {x = 42;};  // error, 不允许修改按值捕获的外部变量的值
	//////////////////////
需要注意的是，上述 f1 的函数体中，虽然我们给 x 做了赋值操作，但是这一操作仅只在函数内部生效——即，实际是给
拷贝至函数内部的 x 进行赋值——而外部的 x 的值依旧是 0。

4.volatile关键字[https://www.cnblogs.com/xkfz007/articles/2419540.html]
volatile的本意是“易变的”,volatile关键字是一种类型修饰符，用它声明的类型变量表示可以被某些编译器未知的因素
更改，比如操作系统、硬件或者其它线程等。遇到这个关键字声明的变量，编译器对访问该变量的代码就不再进行优化，
从而可以提供对特殊地址的稳定访问。当要求使用volatile 声明的变量的值的时候，系统总是重新从它所在的内存读取
数据，即使它前面的指令刚刚从该处读取过数据。而且读取的数据立刻被寄存。例如：
		///////////
		volatile int i=10;
		int a = i;
		。。。//其他代码，并未明确告诉编译器，对i进行过操作
		int b = i;
		///////////////
volatile 指出 i是随时可能发生变化的，每次使用它的时候必须从i的地址中读取，因而编译器生成的汇编代码会重新从
i的地址读取数据放在b中。而优化做法是，由于编译器发现两次从i读数据的代码之间的代码没有对i进行过操作，它会自
动把上次读的数据放在b中。而不是重新从i里面读。这样以来，如果i是一个寄存器变量或者表示一个端口数据就容易出
错，所以说volatile可以保证对特殊地址的稳定访问。


5.Lambda表达式 
[https://blog.csdn.net/u010984552/article/details/53634513]
[https://www.cnblogs.com/langzou/p/5962033.html]
语法定义
[capture](parameters) mutable ->return-type{statement}
1).[capture]：捕捉列表。捕捉列表总是出现在Lambda函数的开始处。实际上，[]是Lambda引出符。编译器根据该引出
 符判断接下来的代码是否是Lambda函数。捕捉列表能够捕捉上下文中的变量以供Lambda函数使用;
2).(parameters)：参数列表。与普通函数的参数列表一致。如果不需要参数传递，则可以连同括号“()”一起省略;
3).mutable：mutable修饰符。默认情况下，Lambda函数总是一个const函数，mutable可以取消其常量性。在使用该修饰
符时，参数列表不可省略（即使参数为空）;
4).->return-type：返回类型。用追踪返回类型形式声明函数的返回类型。我们可以在不需要返回值的时候也可以连同符
号”->”一起省略。此外，在返回类型明确的情况下，也可以省略该部分，让编译器对返回类型进行推导;
5).{statement}：函数体。内容与普通函数一样，不过除了可以使用参数之外，还可以使用所有捕获的变量。
    与普通函数最大的区别是，除了可以使用参数以外，Lambda函数还可以通过捕获列表访问一些上下文中的数据。具体
地，捕捉列表描述了上下文中哪些数据可以被Lambda使用，以及使用方式（以值传递的方式或引用传递的方式）。语
法上，在“[]”包括起来的是捕捉列表，捕捉列表由多个捕捉项组成，并以逗号分隔。捕捉列表有以下几种形式：

		1.[var]表示值传递方式捕捉变量var；
		2.[=]表示值传递方式捕捉所有父作用域的变量（包括this）；
		3.[&var]表示引用传递捕捉变量var；
		4.[&]表示引用传递方式捕捉所有父作用域的变量（包括this）；
		5.[this]表示值传递方式捕捉当前的this指针。

上面提到了一个父作用域，也就是包含Lambda函数的语句块，说通俗点就是包含Lambda的“{}”代码块。上面的捕捉列表还
可以进行组合，例如：

	1.[=,&a,&b]表示以引用传递的方式捕捉变量a和b，以值传递方式捕捉其它所有变量;
	2.[&,a,this]表示以值传递的方式捕捉变量a和this，引用传递方式捕捉其它所有变量。

不过值得注意的是，捕捉列表不允许变量重复传递。下面一些例子就是典型的重复，会导致编译时期的错误。例如：

	3.[=,a]这里已经以值传递方式捕捉了所有变量，但是重复捕捉a了，会报错的;
	4.[&,&this]这里&已经以引用传递方式捕捉了所有变量，再捕捉this也是一种重复。

另外有一点需要注意。对于[=]或[&]的形式，lambda 表达式可以直接使用 this 指针。但是，对于[]的形式，如果要使
用 this 指针，必须显式传入：
		[this]() { this->someFunc(); }();

下面来看一个例子：

		#include <algorithm>
		#include <cmath>

		void abssort(float *x, unsigned N)
		{
		  std::sort(x,
				    x + N,
				    [](float a, float b) { return std::abs(a) < std::abs(b); });
		}

从上面的例子来看，尽管支持 lambda 表达式，但 C++ 的语法看起来却很“神奇”。lambda 表达式使用一对方括号作为
开始的标识，类似于声明一个函数，只不过这个函数没有名字，也就是一个匿名函数。这个匿名函数接受两个参数，a和b；
其返回值是一个 bool 类型的值，注意，返回值是自动推断的，不需要显式声明，不过这是有条件的！条件就是，lambda
表达式的语句只有一个 return。函数的作用是比较 a、b 的绝对值的大小。然后，在此例中，这个 lambda 表达式作为
一个闭包被传递给 std::sort() 函数。
下面，我们来详细解释下这个神奇的语法到底代表着什么。
我们从另外一个例子开始：

		std::cout << [](float f) { return std::abs(f); } (-3.5);

输出值是什么？3.5！注意，这是一个函数对象（由 lambda 表达式生成），其实参是 -3.5，返回值是参数的绝对值。
lambda 表达式的返回值类型是语言自动推断的，因为std::abs()的返回值就是 float。注意，前面我们也提到了，只有
当 lambda 表达式中的语句“足够简单”，才能自动推断返回值类型。

C++ 11 的这种语法，其实就是匿名函数声明之后马上调用（否则的话，如果这个匿名函数既不调用，又不作为闭包传递
给其它函数，那么这个匿名函数就没有什么用处）。如果你觉得奇怪，那么来看看 JavaScript 的这种写法：

function() {} ();
function(a) {} (-3.5);

C++ 11 的写法完全类似 JavaScript 的语法。

如果我不想让 lambda 表达式自动推断类型，或者是 lambda 表达式的内容很复杂，不能自动推断怎么办？比如，
std::abs(float)的返回值是 float，我想把它强制转型为 int。那么，此时，我们就必须显式指定 lambda 表达式返回
值的类型：

std::cout << [](float f) -> int { return std::abs(f); } (-3.5);

这个语句与前面的不同之处在于，lambda 表达式的返回时不是 float 而是 int。也就是说，上面语句的输出值是 3。
返回值类型的概念同普通的函数返回值类型是完全一样的。

当我们想引用一个 lambda 表达式时，我们可以使用auto关键字，例如：

auto lambda = [] () -> int { return val * 100; };

auto关键字实际会将 lambda 表达式转换成一种类似于std::function的内部类型（但并不是std::function类型，虽然
与std::function“兼容”）。所以，我们也可以这么写：

std::function<int()> lambda = [] () -> int { return val * 100; };

如果你对std::function这种写法感到很神奇，可以查看 C++ 11 的有关std::function的用法。简单来说，
std::function就是一个可调用对象模板类，代表一个可调用对象，接受 0 个参数，返回值是int。所以，当我们需要一
个接受一个double作为参数，返回int的对象时，就可以写作：std::function<int(double)>。

6.
函数原型：void *memset(void *s, int ch, size_t n);
函数解释：将s中当前位置后面的n个字节 （typedef unsigned int size_t ）用 ch 替换并返回 s 。
memset：作用是在一段内存块中填充某个给定的值，它是对较大的结构体或数组进行清零操作的一种最快方法


函数原型： void* malloc(unsigned size);
函数解释：在内存的动态存储区中分配一块长度为size字节的连续区域，参数size为需要内存空间的长度，返回该区域的首地址.

函数原型：void *calloc(size_t n, size_t size)；
功 能： 在内存的动态存储区中分配n个长度为size的连续空间，函数返回一个指向分配起始地址的指针；
		如果分配不成功，返回NULL。

函数原型：void *realloc(void *mem_address, unsigned int newsize);
功能:给一个已经分配了地址的指针重新分配空间,参数ptr为原有的空间地址,newsize是重新申请的地址长度.

区别:
(1)函数malloc不能初始化所分配的内存空间,而函数calloc能.如果由malloc()函数分配的内存空间原来没有被使用
过，则其中的每一位可能都是0;反之, 如果这部分内存曾经被分配过,则其中可能遗留有各种各样的数据.也就是说，
使用malloc()函数的程序开始时(内存空间还没有被重新分配)能正常进行,但经过一段时间(内存空间还已经被重新分配)
可能会出现问题.
(2)函数calloc() 会将所分配的内存空间中的每一位都初始化为零,也就是说,如果你是为字符类型或整数类型的元素
分配内存,那么这些元素将保证会被初始化为0;如果你是为指针类型的元素分配内存,那么这些元素通常会被初始化为
空指针;如果你为实型数据分配内存,则这些元素会被初始化为浮点型的零.
(3)函数malloc向系统申请分配指定size个字节的内存空间.返回类型是 void*类型.void*表示未确定类型的指针.
C,C++规定，void* 类型可以强制转换为任何其它类型的指针.
(4)realloc可以对给定的指针所指的空间进行扩大或者缩小，无论是扩张或是缩小，原有内存的中内容将保持不变.
当然，对于缩小，则被缩小的那一部分的内容会丢失.realloc并不保证调整后的内存空间和原来的内存空间保持同一
内存地址.相反，realloc返回的指针很可能指向一个新的地址.
(5)realloc是从堆上分配内存的.当扩大一块内存空间时，realloc()试图直接从堆上现存的数据后面的那些字节中
获得附加的字节，如果能够满足，自然天下太平；如果数据后面的字节不够，问题就出来了，那么就使用堆上第一个
有足够大小的自由块，现存的数据然后就被拷贝至新的位置，而老块则放回到堆上.这句话传递的一个重要的信息就
是数据可能被移动.










